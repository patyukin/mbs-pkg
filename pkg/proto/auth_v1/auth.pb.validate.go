// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth.proto

package auth_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SignUpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpRequestMultiError, or
// nil if none found.
func (m *SignUpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for TelegramLogin

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Patronymic

	// no validation rules for DateOfBirth

	// no validation rules for Phone

	// no validation rules for Address

	if len(errors) > 0 {
		return SignUpRequestMultiError(errors)
	}

	return nil
}

// SignUpRequestMultiError is an error wrapping multiple validation errors
// returned by SignUpRequest.ValidateAll() if the designated constraints
// aren't met.
type SignUpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpRequestMultiError) AllErrors() []error { return m }

// SignUpRequestValidationError is the validation error returned by
// SignUpRequest.Validate if the designated constraints aren't met.
type SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequestValidationError) ErrorName() string { return "SignUpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequestValidationError{}

// Validate checks the field values on SignUpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpResponseMultiError,
// or nil if none found.
func (m *SignUpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Message

	if len(errors) > 0 {
		return SignUpResponseMultiError(errors)
	}

	return nil
}

// SignUpResponseMultiError is an error wrapping multiple validation errors
// returned by SignUpResponse.ValidateAll() if the designated constraints
// aren't met.
type SignUpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpResponseMultiError) AllErrors() []error { return m }

// SignUpResponseValidationError is the validation error returned by
// SignUpResponse.Validate if the designated constraints aren't met.
type SignUpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpResponseValidationError) ErrorName() string { return "SignUpResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignUpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpResponseValidationError{}

// Validate checks the field values on SignInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInRequestMultiError, or
// nil if none found.
func (m *SignInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return SignInRequestMultiError(errors)
	}

	return nil
}

// SignInRequestMultiError is an error wrapping multiple validation errors
// returned by SignInRequest.ValidateAll() if the designated constraints
// aren't met.
type SignInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInRequestMultiError) AllErrors() []error { return m }

// SignInRequestValidationError is the validation error returned by
// SignInRequest.Validate if the designated constraints aren't met.
type SignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequestValidationError) ErrorName() string { return "SignInRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequestValidationError{}

// Validate checks the field values on SignInResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInResponseMultiError,
// or nil if none found.
func (m *SignInResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignInResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignInResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignInResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SignInResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SignInResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SignInResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SignInResponseMultiError(errors)
	}

	return nil
}

// SignInResponseMultiError is an error wrapping multiple validation errors
// returned by SignInResponse.ValidateAll() if the designated constraints
// aren't met.
type SignInResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInResponseMultiError) AllErrors() []error { return m }

// SignInResponseValidationError is the validation error returned by
// SignInResponse.Validate if the designated constraints aren't met.
type SignInResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInResponseValidationError) ErrorName() string { return "SignInResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignInResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInResponseValidationError{}

// Validate checks the field values on CustomError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CustomError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomError with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CustomErrorMultiError, or
// nil if none found.
func (m *CustomError) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Details

	if len(errors) > 0 {
		return CustomErrorMultiError(errors)
	}

	return nil
}

// CustomErrorMultiError is an error wrapping multiple validation errors
// returned by CustomError.ValidateAll() if the designated constraints aren't met.
type CustomErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomErrorMultiError) AllErrors() []error { return m }

// CustomErrorValidationError is the validation error returned by
// CustomError.Validate if the designated constraints aren't met.
type CustomErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomErrorValidationError) ErrorName() string { return "CustomErrorValidationError" }

// Error satisfies the builtin error interface
func (e CustomErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomErrorValidationError{}

// Validate checks the field values on GetUserByUUIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUUIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUUIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUUIDRequestMultiError, or nil if none found.
func (m *GetUserByUUIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUUIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserByUUIDRequestMultiError(errors)
	}

	return nil
}

// GetUserByUUIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserByUUIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserByUUIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUUIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUUIDRequestMultiError) AllErrors() []error { return m }

// GetUserByUUIDRequestValidationError is the validation error returned by
// GetUserByUUIDRequest.Validate if the designated constraints aren't met.
type GetUserByUUIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUUIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUUIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUUIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUUIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUUIDRequestValidationError) ErrorName() string {
	return "GetUserByUUIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUUIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUUIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUUIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUUIDRequestValidationError{}

// Validate checks the field values on GetUserByUUIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUUIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUUIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUUIDResponseMultiError, or nil if none found.
func (m *GetUserByUUIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUUIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Email

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Patronymic

	// no validation rules for DateOfBirth

	// no validation rules for Phone

	// no validation rules for Address

	// no validation rules for TelegramLogin

	// no validation rules for TelegramId

	// no validation rules for ChatId

	// no validation rules for Role

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetUserByUUIDResponseMultiError(errors)
	}

	return nil
}

// GetUserByUUIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserByUUIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserByUUIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUUIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUUIDResponseMultiError) AllErrors() []error { return m }

// GetUserByUUIDResponseValidationError is the validation error returned by
// GetUserByUUIDResponse.Validate if the designated constraints aren't met.
type GetUserByUUIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUUIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUUIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUUIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUUIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUUIDResponseValidationError) ErrorName() string {
	return "GetUserByUUIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUUIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUUIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUUIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUUIDResponseValidationError{}

// Validate checks the field values on TokenGUWR with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenGUWR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenGUWR with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenGUWRMultiError, or nil
// if none found.
func (m *TokenGUWR) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenGUWR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for ExpiresAt

	if len(errors) > 0 {
		return TokenGUWRMultiError(errors)
	}

	return nil
}

// TokenGUWRMultiError is an error wrapping multiple validation errors returned
// by TokenGUWR.ValidateAll() if the designated constraints aren't met.
type TokenGUWRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenGUWRMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenGUWRMultiError) AllErrors() []error { return m }

// TokenGUWRValidationError is the validation error returned by
// TokenGUWR.Validate if the designated constraints aren't met.
type TokenGUWRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenGUWRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenGUWRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenGUWRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenGUWRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenGUWRValidationError) ErrorName() string { return "TokenGUWRValidationError" }

// Error satisfies the builtin error interface
func (e TokenGUWRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenGUWR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenGUWRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenGUWRValidationError{}

// Validate checks the field values on UserGUWR with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGUWR) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGUWR with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGUWRMultiError, or nil
// if none found.
func (m *UserGUWR) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGUWR) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for Role

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserGUWRValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserGUWRValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserGUWRValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserGUWRMultiError(errors)
	}

	return nil
}

// UserGUWRMultiError is an error wrapping multiple validation errors returned
// by UserGUWR.ValidateAll() if the designated constraints aren't met.
type UserGUWRMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGUWRMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGUWRMultiError) AllErrors() []error { return m }

// UserGUWRValidationError is the validation error returned by
// UserGUWR.Validate if the designated constraints aren't met.
type UserGUWRValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGUWRValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGUWRValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGUWRValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGUWRValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGUWRValidationError) ErrorName() string { return "UserGUWRValidationError" }

// Error satisfies the builtin error interface
func (e UserGUWRValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGUWR.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGUWRValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGUWRValidationError{}

// Validate checks the field values on GetUsersWithTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersWithTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersWithTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersWithTokensRequestMultiError, or nil if none found.
func (m *GetUsersWithTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersWithTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetUsersWithTokensRequestMultiError(errors)
	}

	return nil
}

// GetUsersWithTokensRequestMultiError is an error wrapping multiple validation
// errors returned by GetUsersWithTokensRequest.ValidateAll() if the
// designated constraints aren't met.
type GetUsersWithTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersWithTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersWithTokensRequestMultiError) AllErrors() []error { return m }

// GetUsersWithTokensRequestValidationError is the validation error returned by
// GetUsersWithTokensRequest.Validate if the designated constraints aren't met.
type GetUsersWithTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersWithTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersWithTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersWithTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersWithTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersWithTokensRequestValidationError) ErrorName() string {
	return "GetUsersWithTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersWithTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersWithTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersWithTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersWithTokensRequestValidationError{}

// Validate checks the field values on GetUsersWithTokensResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersWithTokensResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersWithTokensResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersWithTokensResponseMultiError, or nil if none found.
func (m *GetUsersWithTokensResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersWithTokensResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersWithTokensResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersWithTokensResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersWithTokensResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetUsersWithTokensResponseMultiError(errors)
	}

	return nil
}

// GetUsersWithTokensResponseMultiError is an error wrapping multiple
// validation errors returned by GetUsersWithTokensResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUsersWithTokensResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersWithTokensResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersWithTokensResponseMultiError) AllErrors() []error { return m }

// GetUsersWithTokensResponseValidationError is the validation error returned
// by GetUsersWithTokensResponse.Validate if the designated constraints aren't met.
type GetUsersWithTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersWithTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersWithTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersWithTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersWithTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersWithTokensResponseValidationError) ErrorName() string {
	return "GetUsersWithTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersWithTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersWithTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersWithTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersWithTokensResponseValidationError{}

// Validate checks the field values on ProfileGUWP with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileGUWP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileGUWP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileGUWPMultiError, or
// nil if none found.
func (m *ProfileGUWP) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileGUWP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Patronymic

	// no validation rules for DateOfBirth

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Address

	if len(errors) > 0 {
		return ProfileGUWPMultiError(errors)
	}

	return nil
}

// ProfileGUWPMultiError is an error wrapping multiple validation errors
// returned by ProfileGUWP.ValidateAll() if the designated constraints aren't met.
type ProfileGUWPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileGUWPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileGUWPMultiError) AllErrors() []error { return m }

// ProfileGUWPValidationError is the validation error returned by
// ProfileGUWP.Validate if the designated constraints aren't met.
type ProfileGUWPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileGUWPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileGUWPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileGUWPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileGUWPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileGUWPValidationError) ErrorName() string { return "ProfileGUWPValidationError" }

// Error satisfies the builtin error interface
func (e ProfileGUWPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileGUWP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileGUWPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileGUWPValidationError{}

// Validate checks the field values on UserGUWP with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserGUWP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGUWP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserGUWPMultiError, or nil
// if none found.
func (m *UserGUWP) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGUWP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for Role

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGUWPValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGUWPValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGUWPValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGUWPMultiError(errors)
	}

	return nil
}

// UserGUWPMultiError is an error wrapping multiple validation errors returned
// by UserGUWP.ValidateAll() if the designated constraints aren't met.
type UserGUWPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGUWPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGUWPMultiError) AllErrors() []error { return m }

// UserGUWPValidationError is the validation error returned by
// UserGUWP.Validate if the designated constraints aren't met.
type UserGUWPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGUWPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGUWPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGUWPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGUWPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGUWPValidationError) ErrorName() string { return "UserGUWPValidationError" }

// Error satisfies the builtin error interface
func (e UserGUWPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGUWP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGUWPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGUWPValidationError{}

// Validate checks the field values on GetUsersWithProfilesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersWithProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersWithProfilesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersWithProfilesRequestMultiError, or nil if none found.
func (m *GetUsersWithProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersWithProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetUsersWithProfilesRequestMultiError(errors)
	}

	return nil
}

// GetUsersWithProfilesRequestMultiError is an error wrapping multiple
// validation errors returned by GetUsersWithProfilesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUsersWithProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersWithProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersWithProfilesRequestMultiError) AllErrors() []error { return m }

// GetUsersWithProfilesRequestValidationError is the validation error returned
// by GetUsersWithProfilesRequest.Validate if the designated constraints
// aren't met.
type GetUsersWithProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersWithProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersWithProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersWithProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersWithProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersWithProfilesRequestValidationError) ErrorName() string {
	return "GetUsersWithProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersWithProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersWithProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersWithProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersWithProfilesRequestValidationError{}

// Validate checks the field values on GetUsersWithProfilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUsersWithProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUsersWithProfilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUsersWithProfilesResponseMultiError, or nil if none found.
func (m *GetUsersWithProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUsersWithProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUsersWithProfilesResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUsersWithProfilesResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUsersWithProfilesResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return GetUsersWithProfilesResponseMultiError(errors)
	}

	return nil
}

// GetUsersWithProfilesResponseMultiError is an error wrapping multiple
// validation errors returned by GetUsersWithProfilesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUsersWithProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUsersWithProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUsersWithProfilesResponseMultiError) AllErrors() []error { return m }

// GetUsersWithProfilesResponseValidationError is the validation error returned
// by GetUsersWithProfilesResponse.Validate if the designated constraints
// aren't met.
type GetUsersWithProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsersWithProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsersWithProfilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsersWithProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsersWithProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsersWithProfilesResponseValidationError) ErrorName() string {
	return "GetUsersWithProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUsersWithProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsersWithProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsersWithProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsersWithProfilesResponseValidationError{}

// Validate checks the field values on SignInVerifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignInVerifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInVerifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignInVerifyRequestMultiError, or nil if none found.
func (m *SignInVerifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInVerifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return SignInVerifyRequestMultiError(errors)
	}

	return nil
}

// SignInVerifyRequestMultiError is an error wrapping multiple validation
// errors returned by SignInVerifyRequest.ValidateAll() if the designated
// constraints aren't met.
type SignInVerifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInVerifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInVerifyRequestMultiError) AllErrors() []error { return m }

// SignInVerifyRequestValidationError is the validation error returned by
// SignInVerifyRequest.Validate if the designated constraints aren't met.
type SignInVerifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInVerifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInVerifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInVerifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInVerifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInVerifyRequestValidationError) ErrorName() string {
	return "SignInVerifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SignInVerifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInVerifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInVerifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInVerifyRequestValidationError{}

// Validate checks the field values on SignInVerifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SignInVerifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInVerifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignInVerifyResponseMultiError, or nil if none found.
func (m *SignInVerifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInVerifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return SignInVerifyResponseMultiError(errors)
	}

	return nil
}

// SignInVerifyResponseMultiError is an error wrapping multiple validation
// errors returned by SignInVerifyResponse.ValidateAll() if the designated
// constraints aren't met.
type SignInVerifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInVerifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInVerifyResponseMultiError) AllErrors() []error { return m }

// SignInVerifyResponseValidationError is the validation error returned by
// SignInVerifyResponse.Validate if the designated constraints aren't met.
type SignInVerifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInVerifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInVerifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInVerifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInVerifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInVerifyResponseValidationError) ErrorName() string {
	return "SignInVerifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SignInVerifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInVerifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInVerifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInVerifyResponseValidationError{}

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}
