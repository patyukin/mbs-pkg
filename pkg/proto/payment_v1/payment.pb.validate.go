// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: payment.proto

package payment_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Currency

	// no validation rules for Balance

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

// Validate checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountResponseMultiError, or nil if none found.
func (m *CreateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccountResponseMultiError(errors)
	}

	return nil
}

// CreateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountResponseMultiError) AllErrors() []error { return m }

// CreateAccountResponseValidationError is the validation error returned by
// CreateAccountResponse.Validate if the designated constraints aren't met.
type CreateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountResponseValidationError) ErrorName() string {
	return "CreateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountResponseValidationError{}

// Validate checks the field values on ConfirmationPaymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmationPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmationPaymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmationPaymentRequestMultiError, or nil if none found.
func (m *ConfirmationPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmationPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for UserId

	if len(errors) > 0 {
		return ConfirmationPaymentRequestMultiError(errors)
	}

	return nil
}

// ConfirmationPaymentRequestMultiError is an error wrapping multiple
// validation errors returned by ConfirmationPaymentRequest.ValidateAll() if
// the designated constraints aren't met.
type ConfirmationPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmationPaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmationPaymentRequestMultiError) AllErrors() []error { return m }

// ConfirmationPaymentRequestValidationError is the validation error returned
// by ConfirmationPaymentRequest.Validate if the designated constraints aren't met.
type ConfirmationPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmationPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmationPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmationPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmationPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmationPaymentRequestValidationError) ErrorName() string {
	return "ConfirmationPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmationPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmationPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmationPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmationPaymentRequestValidationError{}

// Validate checks the field values on ConfirmationPaymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmationPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmationPaymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmationPaymentResponseMultiError, or nil if none found.
func (m *ConfirmationPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmationPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfirmationPaymentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfirmationPaymentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfirmationPaymentResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfirmationPaymentResponseMultiError(errors)
	}

	return nil
}

// ConfirmationPaymentResponseMultiError is an error wrapping multiple
// validation errors returned by ConfirmationPaymentResponse.ValidateAll() if
// the designated constraints aren't met.
type ConfirmationPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmationPaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmationPaymentResponseMultiError) AllErrors() []error { return m }

// ConfirmationPaymentResponseValidationError is the validation error returned
// by ConfirmationPaymentResponse.Validate if the designated constraints
// aren't met.
type ConfirmationPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmationPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmationPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmationPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmationPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmationPaymentResponseValidationError) ErrorName() string {
	return "ConfirmationPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmationPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmationPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmationPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmationPaymentResponseValidationError{}

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentRequestMultiError, or nil if none found.
func (m *CreatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SenderAccountId

	// no validation rules for ReceiverAccountId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Description

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreatePaymentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentResponseMultiError, or nil if none found.
func (m *CreatePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Payment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Payment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PaymentMultiError, or nil if none found.
func (m *Payment) ValidateAll() error {
	return m.validate(true)
}

func (m *Payment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SenderAccountId

	// no validation rules for ReceiverAccountId

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return PaymentMultiError(errors)
	}

	return nil
}

// PaymentMultiError is an error wrapping multiple validation errors returned
// by Payment.ValidateAll() if the designated constraints aren't met.
type PaymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentMultiError) AllErrors() []error { return m }

// PaymentValidationError is the validation error returned by Payment.Validate
// if the designated constraints aren't met.
type PaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentValidationError) ErrorName() string { return "PaymentValidationError" }

// Error satisfies the builtin error interface
func (e PaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentValidationError{}

// Validate checks the field values on GetPaymentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentRequestMultiError, or nil if none found.
func (m *GetPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPaymentRequestMultiError(errors)
	}

	return nil
}

// GetPaymentRequestMultiError is an error wrapping multiple validation errors
// returned by GetPaymentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentRequestMultiError) AllErrors() []error { return m }

// GetPaymentRequestValidationError is the validation error returned by
// GetPaymentRequest.Validate if the designated constraints aren't met.
type GetPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentRequestValidationError) ErrorName() string {
	return "GetPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentRequestValidationError{}

// Validate checks the field values on GetPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentResponseMultiError, or nil if none found.
func (m *GetPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentResponseValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentResponseValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPaymentResponseMultiError(errors)
	}

	return nil
}

// GetPaymentResponseMultiError is an error wrapping multiple validation errors
// returned by GetPaymentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentResponseMultiError) AllErrors() []error { return m }

// GetPaymentResponseValidationError is the validation error returned by
// GetPaymentResponse.Validate if the designated constraints aren't met.
type GetPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentResponseValidationError) ErrorName() string {
	return "GetPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentResponseValidationError{}

// Validate checks the field values on UpdatePaymentStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePaymentStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePaymentStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePaymentStatusRequestMultiError, or nil if none found.
func (m *UpdatePaymentStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePaymentStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdatePaymentStatusRequestMultiError(errors)
	}

	return nil
}

// UpdatePaymentStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePaymentStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePaymentStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePaymentStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePaymentStatusRequestMultiError) AllErrors() []error { return m }

// UpdatePaymentStatusRequestValidationError is the validation error returned
// by UpdatePaymentStatusRequest.Validate if the designated constraints aren't met.
type UpdatePaymentStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentStatusRequestValidationError) ErrorName() string {
	return "UpdatePaymentStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentStatusRequestValidationError{}

// Validate checks the field values on UpdatePaymentStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePaymentStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePaymentStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePaymentStatusResponseMultiError, or nil if none found.
func (m *UpdatePaymentStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePaymentStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePaymentStatusResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePaymentStatusResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePaymentStatusResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePaymentStatusResponseMultiError(errors)
	}

	return nil
}

// UpdatePaymentStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePaymentStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdatePaymentStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePaymentStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePaymentStatusResponseMultiError) AllErrors() []error { return m }

// UpdatePaymentStatusResponseValidationError is the validation error returned
// by UpdatePaymentStatusResponse.Validate if the designated constraints
// aren't met.
type UpdatePaymentStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentStatusResponseValidationError) ErrorName() string {
	return "UpdatePaymentStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentStatusResponseValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PaymentId

	// no validation rules for AccountId

	// no validation rules for Type

	// no validation rules for Amount

	// no validation rules for Currency

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on GetTransactionsByPaymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionsByPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionsByPaymentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionsByPaymentRequestMultiError, or nil if none found.
func (m *GetTransactionsByPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionsByPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	if len(errors) > 0 {
		return GetTransactionsByPaymentRequestMultiError(errors)
	}

	return nil
}

// GetTransactionsByPaymentRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransactionsByPaymentRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTransactionsByPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionsByPaymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionsByPaymentRequestMultiError) AllErrors() []error { return m }

// GetTransactionsByPaymentRequestValidationError is the validation error
// returned by GetTransactionsByPaymentRequest.Validate if the designated
// constraints aren't met.
type GetTransactionsByPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsByPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsByPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsByPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsByPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsByPaymentRequestValidationError) ErrorName() string {
	return "GetTransactionsByPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsByPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsByPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsByPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsByPaymentRequestValidationError{}

// Validate checks the field values on GetTransactionsByPaymentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTransactionsByPaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionsByPaymentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTransactionsByPaymentResponseMultiError, or nil if none found.
func (m *GetTransactionsByPaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionsByPaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTransactionsByPaymentResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTransactionsByPaymentResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTransactionsByPaymentResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionsByPaymentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionsByPaymentResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionsByPaymentResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionsByPaymentResponseMultiError(errors)
	}

	return nil
}

// GetTransactionsByPaymentResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTransactionsByPaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionsByPaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionsByPaymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionsByPaymentResponseMultiError) AllErrors() []error { return m }

// GetTransactionsByPaymentResponseValidationError is the validation error
// returned by GetTransactionsByPaymentResponse.Validate if the designated
// constraints aren't met.
type GetTransactionsByPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionsByPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionsByPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionsByPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionsByPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionsByPaymentResponseValidationError) ErrorName() string {
	return "GetTransactionsByPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionsByPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionsByPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionsByPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionsByPaymentResponseValidationError{}
