// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: credit.proto

package credit_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditsServiceV1_CreateCreditApplication_FullMethodName         = "/credit_v1.CreditsServiceV1/CreateCreditApplication"
	CreditsServiceV1_CreditApplicationConfirmation_FullMethodName   = "/credit_v1.CreditsServiceV1/CreditApplicationConfirmation"
	CreditsServiceV1_GetCreditApplication_FullMethodName            = "/credit_v1.CreditsServiceV1/GetCreditApplication"
	CreditsServiceV1_UpdateCreditApplicationSolution_FullMethodName = "/credit_v1.CreditsServiceV1/UpdateCreditApplicationSolution"
	CreditsServiceV1_CreateCredit_FullMethodName                    = "/credit_v1.CreditsServiceV1/CreateCredit"
	CreditsServiceV1_GetCredit_FullMethodName                       = "/credit_v1.CreditsServiceV1/GetCredit"
	CreditsServiceV1_GetListUserCredits_FullMethodName              = "/credit_v1.CreditsServiceV1/GetListUserCredits"
	CreditsServiceV1_GetPaymentSchedule_FullMethodName              = "/credit_v1.CreditsServiceV1/GetPaymentSchedule"
)

// CreditsServiceV1Client is the client API for CreditsServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис кредитов
type CreditsServiceV1Client interface {
	// Создание новой заявки на кредит
	CreateCreditApplication(ctx context.Context, in *CreateCreditApplicationRequest, opts ...grpc.CallOption) (*CreateCreditApplicationResponse, error)
	// Подтверждение новой заявки на кредит
	CreditApplicationConfirmation(ctx context.Context, in *CreditApplicationConfirmationRequest, opts ...grpc.CallOption) (*CreditApplicationConfirmationResponse, error)
	// Получение статуса заявки на кредит
	GetCreditApplication(ctx context.Context, in *GetCreditApplicationRequest, opts ...grpc.CallOption) (*GetCreditApplicationResponse, error)
	// Обновление статуса заявки на кредит (например, одобрение или отклонение)
	UpdateCreditApplicationSolution(ctx context.Context, in *UpdateCreditApplicationSolutionRequest, opts ...grpc.CallOption) (*UpdateCreditApplicationSolutionResponse, error)
	// Создание нового кредита
	CreateCredit(ctx context.Context, in *CreateCreditRequest, opts ...grpc.CallOption) (*CreateCreditResponse, error)
	// Получение информации о кредите
	GetCredit(ctx context.Context, in *GetCreditRequest, opts ...grpc.CallOption) (*GetCreditResponse, error)
	// Получение списка кредитов пользователя с пагинацией
	GetListUserCredits(ctx context.Context, in *GetListUserCreditsRequest, opts ...grpc.CallOption) (*GetListUserCreditsResponse, error)
	// Получение графика платежей по кредиту
	GetPaymentSchedule(ctx context.Context, in *GetPaymentScheduleRequest, opts ...grpc.CallOption) (*GetPaymentScheduleResponse, error)
}

type creditsServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCreditsServiceV1Client(cc grpc.ClientConnInterface) CreditsServiceV1Client {
	return &creditsServiceV1Client{cc}
}

func (c *creditsServiceV1Client) CreateCreditApplication(ctx context.Context, in *CreateCreditApplicationRequest, opts ...grpc.CallOption) (*CreateCreditApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCreditApplicationResponse)
	err := c.cc.Invoke(ctx, CreditsServiceV1_CreateCreditApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceV1Client) CreditApplicationConfirmation(ctx context.Context, in *CreditApplicationConfirmationRequest, opts ...grpc.CallOption) (*CreditApplicationConfirmationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditApplicationConfirmationResponse)
	err := c.cc.Invoke(ctx, CreditsServiceV1_CreditApplicationConfirmation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceV1Client) GetCreditApplication(ctx context.Context, in *GetCreditApplicationRequest, opts ...grpc.CallOption) (*GetCreditApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreditApplicationResponse)
	err := c.cc.Invoke(ctx, CreditsServiceV1_GetCreditApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceV1Client) UpdateCreditApplicationSolution(ctx context.Context, in *UpdateCreditApplicationSolutionRequest, opts ...grpc.CallOption) (*UpdateCreditApplicationSolutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCreditApplicationSolutionResponse)
	err := c.cc.Invoke(ctx, CreditsServiceV1_UpdateCreditApplicationSolution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceV1Client) CreateCredit(ctx context.Context, in *CreateCreditRequest, opts ...grpc.CallOption) (*CreateCreditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCreditResponse)
	err := c.cc.Invoke(ctx, CreditsServiceV1_CreateCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceV1Client) GetCredit(ctx context.Context, in *GetCreditRequest, opts ...grpc.CallOption) (*GetCreditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreditResponse)
	err := c.cc.Invoke(ctx, CreditsServiceV1_GetCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceV1Client) GetListUserCredits(ctx context.Context, in *GetListUserCreditsRequest, opts ...grpc.CallOption) (*GetListUserCreditsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListUserCreditsResponse)
	err := c.cc.Invoke(ctx, CreditsServiceV1_GetListUserCredits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditsServiceV1Client) GetPaymentSchedule(ctx context.Context, in *GetPaymentScheduleRequest, opts ...grpc.CallOption) (*GetPaymentScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentScheduleResponse)
	err := c.cc.Invoke(ctx, CreditsServiceV1_GetPaymentSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditsServiceV1Server is the server API for CreditsServiceV1 service.
// All implementations must embed UnimplementedCreditsServiceV1Server
// for forward compatibility.
//
// Сервис кредитов
type CreditsServiceV1Server interface {
	// Создание новой заявки на кредит
	CreateCreditApplication(context.Context, *CreateCreditApplicationRequest) (*CreateCreditApplicationResponse, error)
	// Подтверждение новой заявки на кредит
	CreditApplicationConfirmation(context.Context, *CreditApplicationConfirmationRequest) (*CreditApplicationConfirmationResponse, error)
	// Получение статуса заявки на кредит
	GetCreditApplication(context.Context, *GetCreditApplicationRequest) (*GetCreditApplicationResponse, error)
	// Обновление статуса заявки на кредит (например, одобрение или отклонение)
	UpdateCreditApplicationSolution(context.Context, *UpdateCreditApplicationSolutionRequest) (*UpdateCreditApplicationSolutionResponse, error)
	// Создание нового кредита
	CreateCredit(context.Context, *CreateCreditRequest) (*CreateCreditResponse, error)
	// Получение информации о кредите
	GetCredit(context.Context, *GetCreditRequest) (*GetCreditResponse, error)
	// Получение списка кредитов пользователя с пагинацией
	GetListUserCredits(context.Context, *GetListUserCreditsRequest) (*GetListUserCreditsResponse, error)
	// Получение графика платежей по кредиту
	GetPaymentSchedule(context.Context, *GetPaymentScheduleRequest) (*GetPaymentScheduleResponse, error)
	mustEmbedUnimplementedCreditsServiceV1Server()
}

// UnimplementedCreditsServiceV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditsServiceV1Server struct{}

func (UnimplementedCreditsServiceV1Server) CreateCreditApplication(context.Context, *CreateCreditApplicationRequest) (*CreateCreditApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditApplication not implemented")
}
func (UnimplementedCreditsServiceV1Server) CreditApplicationConfirmation(context.Context, *CreditApplicationConfirmationRequest) (*CreditApplicationConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditApplicationConfirmation not implemented")
}
func (UnimplementedCreditsServiceV1Server) GetCreditApplication(context.Context, *GetCreditApplicationRequest) (*GetCreditApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditApplication not implemented")
}
func (UnimplementedCreditsServiceV1Server) UpdateCreditApplicationSolution(context.Context, *UpdateCreditApplicationSolutionRequest) (*UpdateCreditApplicationSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreditApplicationSolution not implemented")
}
func (UnimplementedCreditsServiceV1Server) CreateCredit(context.Context, *CreateCreditRequest) (*CreateCreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredit not implemented")
}
func (UnimplementedCreditsServiceV1Server) GetCredit(context.Context, *GetCreditRequest) (*GetCreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredit not implemented")
}
func (UnimplementedCreditsServiceV1Server) GetListUserCredits(context.Context, *GetListUserCreditsRequest) (*GetListUserCreditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserCredits not implemented")
}
func (UnimplementedCreditsServiceV1Server) GetPaymentSchedule(context.Context, *GetPaymentScheduleRequest) (*GetPaymentScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentSchedule not implemented")
}
func (UnimplementedCreditsServiceV1Server) mustEmbedUnimplementedCreditsServiceV1Server() {}
func (UnimplementedCreditsServiceV1Server) testEmbeddedByValue()                          {}

// UnsafeCreditsServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditsServiceV1Server will
// result in compilation errors.
type UnsafeCreditsServiceV1Server interface {
	mustEmbedUnimplementedCreditsServiceV1Server()
}

func RegisterCreditsServiceV1Server(s grpc.ServiceRegistrar, srv CreditsServiceV1Server) {
	// If the following call pancis, it indicates UnimplementedCreditsServiceV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditsServiceV1_ServiceDesc, srv)
}

func _CreditsServiceV1_CreateCreditApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreditApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceV1Server).CreateCreditApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsServiceV1_CreateCreditApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceV1Server).CreateCreditApplication(ctx, req.(*CreateCreditApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsServiceV1_CreditApplicationConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditApplicationConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceV1Server).CreditApplicationConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsServiceV1_CreditApplicationConfirmation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceV1Server).CreditApplicationConfirmation(ctx, req.(*CreditApplicationConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsServiceV1_GetCreditApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceV1Server).GetCreditApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsServiceV1_GetCreditApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceV1Server).GetCreditApplication(ctx, req.(*GetCreditApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsServiceV1_UpdateCreditApplicationSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreditApplicationSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceV1Server).UpdateCreditApplicationSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsServiceV1_UpdateCreditApplicationSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceV1Server).UpdateCreditApplicationSolution(ctx, req.(*UpdateCreditApplicationSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsServiceV1_CreateCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceV1Server).CreateCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsServiceV1_CreateCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceV1Server).CreateCredit(ctx, req.(*CreateCreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsServiceV1_GetCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceV1Server).GetCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsServiceV1_GetCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceV1Server).GetCredit(ctx, req.(*GetCreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsServiceV1_GetListUserCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListUserCreditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceV1Server).GetListUserCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsServiceV1_GetListUserCredits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceV1Server).GetListUserCredits(ctx, req.(*GetListUserCreditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditsServiceV1_GetPaymentSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditsServiceV1Server).GetPaymentSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditsServiceV1_GetPaymentSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditsServiceV1Server).GetPaymentSchedule(ctx, req.(*GetPaymentScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditsServiceV1_ServiceDesc is the grpc.ServiceDesc for CreditsServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditsServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credit_v1.CreditsServiceV1",
	HandlerType: (*CreditsServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCreditApplication",
			Handler:    _CreditsServiceV1_CreateCreditApplication_Handler,
		},
		{
			MethodName: "CreditApplicationConfirmation",
			Handler:    _CreditsServiceV1_CreditApplicationConfirmation_Handler,
		},
		{
			MethodName: "GetCreditApplication",
			Handler:    _CreditsServiceV1_GetCreditApplication_Handler,
		},
		{
			MethodName: "UpdateCreditApplicationSolution",
			Handler:    _CreditsServiceV1_UpdateCreditApplicationSolution_Handler,
		},
		{
			MethodName: "CreateCredit",
			Handler:    _CreditsServiceV1_CreateCredit_Handler,
		},
		{
			MethodName: "GetCredit",
			Handler:    _CreditsServiceV1_GetCredit_Handler,
		},
		{
			MethodName: "GetListUserCredits",
			Handler:    _CreditsServiceV1_GetListUserCredits_Handler,
		},
		{
			MethodName: "GetPaymentSchedule",
			Handler:    _CreditsServiceV1_GetPaymentSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credit.proto",
}
