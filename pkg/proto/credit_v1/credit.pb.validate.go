// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: credit.proto

package creditspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCreditApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditApplicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCreditApplicationRequestMultiError, or nil if none found.
func (m *CreateCreditApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for RequestedAmount

	// no validation rules for InterestRate

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateCreditApplicationRequestMultiError(errors)
	}

	return nil
}

// CreateCreditApplicationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCreditApplicationRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCreditApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditApplicationRequestMultiError) AllErrors() []error { return m }

// CreateCreditApplicationRequestValidationError is the validation error
// returned by CreateCreditApplicationRequest.Validate if the designated
// constraints aren't met.
type CreateCreditApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditApplicationRequestValidationError) ErrorName() string {
	return "CreateCreditApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditApplicationRequestValidationError{}

// Validate checks the field values on CreateCreditApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCreditApplicationResponseMultiError, or nil if none found.
func (m *CreateCreditApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCreditApplicationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCreditApplicationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCreditApplicationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCreditApplicationResponseMultiError(errors)
	}

	return nil
}

// CreateCreditApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCreditApplicationResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateCreditApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditApplicationResponseMultiError) AllErrors() []error { return m }

// CreateCreditApplicationResponseValidationError is the validation error
// returned by CreateCreditApplicationResponse.Validate if the designated
// constraints aren't met.
type CreateCreditApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditApplicationResponseValidationError) ErrorName() string {
	return "CreateCreditApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditApplicationResponseValidationError{}

// Validate checks the field values on GetCreditApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditApplicationRequestMultiError, or nil if none found.
func (m *GetCreditApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	if len(errors) > 0 {
		return GetCreditApplicationRequestMultiError(errors)
	}

	return nil
}

// GetCreditApplicationRequestMultiError is an error wrapping multiple
// validation errors returned by GetCreditApplicationRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCreditApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditApplicationRequestMultiError) AllErrors() []error { return m }

// GetCreditApplicationRequestValidationError is the validation error returned
// by GetCreditApplicationRequest.Validate if the designated constraints
// aren't met.
type GetCreditApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditApplicationRequestValidationError) ErrorName() string {
	return "GetCreditApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditApplicationRequestValidationError{}

// Validate checks the field values on GetCreditApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditApplicationResponseMultiError, or nil if none found.
func (m *GetCreditApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for Status

	// no validation rules for ApprovedAmount

	// no validation rules for DecisionDate

	// no validation rules for Message

	if len(errors) > 0 {
		return GetCreditApplicationResponseMultiError(errors)
	}

	return nil
}

// GetCreditApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by GetCreditApplicationResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCreditApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditApplicationResponseMultiError) AllErrors() []error { return m }

// GetCreditApplicationResponseValidationError is the validation error returned
// by GetCreditApplicationResponse.Validate if the designated constraints
// aren't met.
type GetCreditApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditApplicationResponseValidationError) ErrorName() string {
	return "GetCreditApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditApplicationResponseValidationError{}

// Validate checks the field values on UpdateCreditApplicationStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateCreditApplicationStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCreditApplicationStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCreditApplicationStatusRequestMultiError, or nil if none found.
func (m *UpdateCreditApplicationStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCreditApplicationStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for NewStatus

	// no validation rules for ApprovedAmount

	// no validation rules for DecisionNotes

	if len(errors) > 0 {
		return UpdateCreditApplicationStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateCreditApplicationStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCreditApplicationStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCreditApplicationStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCreditApplicationStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCreditApplicationStatusRequestMultiError) AllErrors() []error { return m }

// UpdateCreditApplicationStatusRequestValidationError is the validation error
// returned by UpdateCreditApplicationStatusRequest.Validate if the designated
// constraints aren't met.
type UpdateCreditApplicationStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCreditApplicationStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCreditApplicationStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCreditApplicationStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCreditApplicationStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCreditApplicationStatusRequestValidationError) ErrorName() string {
	return "UpdateCreditApplicationStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCreditApplicationStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCreditApplicationStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCreditApplicationStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCreditApplicationStatusRequestValidationError{}

// Validate checks the field values on UpdateCreditApplicationStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateCreditApplicationStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCreditApplicationStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCreditApplicationStatusResponseMultiError, or nil if none found.
func (m *UpdateCreditApplicationStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCreditApplicationStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdateCreditApplicationStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateCreditApplicationStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateCreditApplicationStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCreditApplicationStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCreditApplicationStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCreditApplicationStatusResponseMultiError) AllErrors() []error { return m }

// UpdateCreditApplicationStatusResponseValidationError is the validation error
// returned by UpdateCreditApplicationStatusResponse.Validate if the
// designated constraints aren't met.
type UpdateCreditApplicationStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCreditApplicationStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCreditApplicationStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCreditApplicationStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCreditApplicationStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCreditApplicationStatusResponseValidationError) ErrorName() string {
	return "UpdateCreditApplicationStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCreditApplicationStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCreditApplicationStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCreditApplicationStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCreditApplicationStatusResponseValidationError{}

// Validate checks the field values on GetCreditRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCreditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditRequestMultiError, or nil if none found.
func (m *GetCreditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	if len(errors) > 0 {
		return GetCreditRequestMultiError(errors)
	}

	return nil
}

// GetCreditRequestMultiError is an error wrapping multiple validation errors
// returned by GetCreditRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCreditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditRequestMultiError) AllErrors() []error { return m }

// GetCreditRequestValidationError is the validation error returned by
// GetCreditRequest.Validate if the designated constraints aren't met.
type GetCreditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditRequestValidationError) ErrorName() string { return "GetCreditRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCreditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditRequestValidationError{}

// Validate checks the field values on GetCreditResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCreditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditResponseMultiError, or nil if none found.
func (m *GetCreditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	// no validation rules for UserId

	// no validation rules for Amount

	// no validation rules for InterestRate

	// no validation rules for RemainingAmount

	// no validation rules for Status

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Description

	if len(errors) > 0 {
		return GetCreditResponseMultiError(errors)
	}

	return nil
}

// GetCreditResponseMultiError is an error wrapping multiple validation errors
// returned by GetCreditResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCreditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditResponseMultiError) AllErrors() []error { return m }

// GetCreditResponseValidationError is the validation error returned by
// GetCreditResponse.Validate if the designated constraints aren't met.
type GetCreditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditResponseValidationError) ErrorName() string {
	return "GetCreditResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditResponseValidationError{}

// Validate checks the field values on ListUserCreditsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserCreditsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserCreditsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserCreditsRequestMultiError, or nil if none found.
func (m *ListUserCreditsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserCreditsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListUserCreditsRequestMultiError(errors)
	}

	return nil
}

// ListUserCreditsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserCreditsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserCreditsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserCreditsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserCreditsRequestMultiError) AllErrors() []error { return m }

// ListUserCreditsRequestValidationError is the validation error returned by
// ListUserCreditsRequest.Validate if the designated constraints aren't met.
type ListUserCreditsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserCreditsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserCreditsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserCreditsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserCreditsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserCreditsRequestValidationError) ErrorName() string {
	return "ListUserCreditsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserCreditsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserCreditsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserCreditsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserCreditsRequestValidationError{}

// Validate checks the field values on ListUserCreditsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserCreditsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserCreditsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserCreditsResponseMultiError, or nil if none found.
func (m *ListUserCreditsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserCreditsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreditList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserCreditsResponseValidationError{
						field:  fmt.Sprintf("CreditList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserCreditsResponseValidationError{
						field:  fmt.Sprintf("CreditList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserCreditsResponseValidationError{
					field:  fmt.Sprintf("CreditList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCredits

	// no validation rules for CurrentPage

	// no validation rules for TotalPages

	if len(errors) > 0 {
		return ListUserCreditsResponseMultiError(errors)
	}

	return nil
}

// ListUserCreditsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserCreditsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserCreditsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserCreditsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserCreditsResponseMultiError) AllErrors() []error { return m }

// ListUserCreditsResponseValidationError is the validation error returned by
// ListUserCreditsResponse.Validate if the designated constraints aren't met.
type ListUserCreditsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserCreditsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserCreditsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserCreditsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserCreditsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserCreditsResponseValidationError) ErrorName() string {
	return "ListUserCreditsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserCreditsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserCreditsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserCreditsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserCreditsResponseValidationError{}

// Validate checks the field values on Credit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Credit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credit with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CreditMultiError, or nil if none found.
func (m *Credit) ValidateAll() error {
	return m.validate(true)
}

func (m *Credit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	// no validation rules for UserId

	// no validation rules for Amount

	// no validation rules for InterestRate

	// no validation rules for RemainingAmount

	// no validation rules for Status

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Description

	if len(errors) > 0 {
		return CreditMultiError(errors)
	}

	return nil
}

// CreditMultiError is an error wrapping multiple validation errors returned by
// Credit.ValidateAll() if the designated constraints aren't met.
type CreditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditMultiError) AllErrors() []error { return m }

// CreditValidationError is the validation error returned by Credit.Validate if
// the designated constraints aren't met.
type CreditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditValidationError) ErrorName() string { return "CreditValidationError" }

// Error satisfies the builtin error interface
func (e CreditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditValidationError{}

// Validate checks the field values on CreatePaymentScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentScheduleRequestMultiError, or nil if none found.
func (m *CreatePaymentScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	if len(errors) > 0 {
		return CreatePaymentScheduleRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePaymentScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentScheduleRequestMultiError) AllErrors() []error { return m }

// CreatePaymentScheduleRequestValidationError is the validation error returned
// by CreatePaymentScheduleRequest.Validate if the designated constraints
// aren't met.
type CreatePaymentScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentScheduleRequestValidationError) ErrorName() string {
	return "CreatePaymentScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentScheduleRequestValidationError{}

// Validate checks the field values on CreatePaymentScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePaymentScheduleResponseMultiError, or nil if none found.
func (m *CreatePaymentScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CreatePaymentScheduleResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by CreatePaymentScheduleResponse.ValidateAll()
// if the designated constraints aren't met.
type CreatePaymentScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentScheduleResponseMultiError) AllErrors() []error { return m }

// CreatePaymentScheduleResponseValidationError is the validation error
// returned by CreatePaymentScheduleResponse.Validate if the designated
// constraints aren't met.
type CreatePaymentScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentScheduleResponseValidationError) ErrorName() string {
	return "CreatePaymentScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentScheduleResponseValidationError{}

// Validate checks the field values on GetPaymentScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentScheduleRequestMultiError, or nil if none found.
func (m *GetPaymentScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	if len(errors) > 0 {
		return GetPaymentScheduleRequestMultiError(errors)
	}

	return nil
}

// GetPaymentScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by GetPaymentScheduleRequest.ValidateAll() if the
// designated constraints aren't met.
type GetPaymentScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentScheduleRequestMultiError) AllErrors() []error { return m }

// GetPaymentScheduleRequestValidationError is the validation error returned by
// GetPaymentScheduleRequest.Validate if the designated constraints aren't met.
type GetPaymentScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentScheduleRequestValidationError) ErrorName() string {
	return "GetPaymentScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentScheduleRequestValidationError{}

// Validate checks the field values on GetPaymentScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentScheduleResponseMultiError, or nil if none found.
func (m *GetPaymentScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentScheduleResponseValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentScheduleResponseValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentScheduleResponseValidationError{
					field:  fmt.Sprintf("Schedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPaymentScheduleResponseMultiError(errors)
	}

	return nil
}

// GetPaymentScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by GetPaymentScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentScheduleResponseMultiError) AllErrors() []error { return m }

// GetPaymentScheduleResponseValidationError is the validation error returned
// by GetPaymentScheduleResponse.Validate if the designated constraints aren't met.
type GetPaymentScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentScheduleResponseValidationError) ErrorName() string {
	return "GetPaymentScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentScheduleResponseValidationError{}

// Validate checks the field values on PaymentSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentScheduleMultiError, or nil if none found.
func (m *PaymentSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for Amount

	// no validation rules for DueDate

	// no validation rules for Status

	if len(errors) > 0 {
		return PaymentScheduleMultiError(errors)
	}

	return nil
}

// PaymentScheduleMultiError is an error wrapping multiple validation errors
// returned by PaymentSchedule.ValidateAll() if the designated constraints
// aren't met.
type PaymentScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentScheduleMultiError) AllErrors() []error { return m }

// PaymentScheduleValidationError is the validation error returned by
// PaymentSchedule.Validate if the designated constraints aren't met.
type PaymentScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentScheduleValidationError) ErrorName() string { return "PaymentScheduleValidationError" }

// Error satisfies the builtin error interface
func (e PaymentScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentScheduleValidationError{}

// Validate checks the field values on UpdatePaymentScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePaymentScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePaymentScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePaymentScheduleRequestMultiError, or nil if none found.
func (m *UpdatePaymentScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePaymentScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for NewStatus

	if len(errors) > 0 {
		return UpdatePaymentScheduleRequestMultiError(errors)
	}

	return nil
}

// UpdatePaymentScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePaymentScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePaymentScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePaymentScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePaymentScheduleRequestMultiError) AllErrors() []error { return m }

// UpdatePaymentScheduleRequestValidationError is the validation error returned
// by UpdatePaymentScheduleRequest.Validate if the designated constraints
// aren't met.
type UpdatePaymentScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentScheduleRequestValidationError) ErrorName() string {
	return "UpdatePaymentScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentScheduleRequestValidationError{}

// Validate checks the field values on UpdatePaymentScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePaymentScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePaymentScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePaymentScheduleResponseMultiError, or nil if none found.
func (m *UpdatePaymentScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePaymentScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return UpdatePaymentScheduleResponseMultiError(errors)
	}

	return nil
}

// UpdatePaymentScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by UpdatePaymentScheduleResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdatePaymentScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePaymentScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePaymentScheduleResponseMultiError) AllErrors() []error { return m }

// UpdatePaymentScheduleResponseValidationError is the validation error
// returned by UpdatePaymentScheduleResponse.Validate if the designated
// constraints aren't met.
type UpdatePaymentScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentScheduleResponseValidationError) ErrorName() string {
	return "UpdatePaymentScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentScheduleResponseValidationError{}
