// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: credit.proto

package credit_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCreditApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditApplicationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCreditApplicationRequestMultiError, or nil if none found.
func (m *CreateCreditApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for RequestedAmount

	// no validation rules for InterestRate

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateCreditApplicationRequestMultiError(errors)
	}

	return nil
}

// CreateCreditApplicationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCreditApplicationRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCreditApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditApplicationRequestMultiError) AllErrors() []error { return m }

// CreateCreditApplicationRequestValidationError is the validation error
// returned by CreateCreditApplicationRequest.Validate if the designated
// constraints aren't met.
type CreateCreditApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditApplicationRequestValidationError) ErrorName() string {
	return "CreateCreditApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditApplicationRequestValidationError{}

// Validate checks the field values on CreateCreditApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditApplicationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCreditApplicationResponseMultiError, or nil if none found.
func (m *CreateCreditApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCreditApplicationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCreditApplicationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCreditApplicationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCreditApplicationResponseMultiError(errors)
	}

	return nil
}

// CreateCreditApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateCreditApplicationResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateCreditApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditApplicationResponseMultiError) AllErrors() []error { return m }

// CreateCreditApplicationResponseValidationError is the validation error
// returned by CreateCreditApplicationResponse.Validate if the designated
// constraints aren't met.
type CreateCreditApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditApplicationResponseValidationError) ErrorName() string {
	return "CreateCreditApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditApplicationResponseValidationError{}

// Validate checks the field values on CreditApplicationConfirmationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreditApplicationConfirmationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditApplicationConfirmationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreditApplicationConfirmationRequestMultiError, or nil if none found.
func (m *CreditApplicationConfirmationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditApplicationConfirmationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for UserId

	if len(errors) > 0 {
		return CreditApplicationConfirmationRequestMultiError(errors)
	}

	return nil
}

// CreditApplicationConfirmationRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreditApplicationConfirmationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreditApplicationConfirmationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditApplicationConfirmationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditApplicationConfirmationRequestMultiError) AllErrors() []error { return m }

// CreditApplicationConfirmationRequestValidationError is the validation error
// returned by CreditApplicationConfirmationRequest.Validate if the designated
// constraints aren't met.
type CreditApplicationConfirmationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditApplicationConfirmationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditApplicationConfirmationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditApplicationConfirmationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditApplicationConfirmationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditApplicationConfirmationRequestValidationError) ErrorName() string {
	return "CreditApplicationConfirmationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreditApplicationConfirmationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditApplicationConfirmationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditApplicationConfirmationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditApplicationConfirmationRequestValidationError{}

// Validate checks the field values on CreditApplicationConfirmationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreditApplicationConfirmationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditApplicationConfirmationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreditApplicationConfirmationResponseMultiError, or nil if none found.
func (m *CreditApplicationConfirmationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditApplicationConfirmationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for Status

	// no validation rules for Message

	if len(errors) > 0 {
		return CreditApplicationConfirmationResponseMultiError(errors)
	}

	return nil
}

// CreditApplicationConfirmationResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreditApplicationConfirmationResponse.ValidateAll() if the designated
// constraints aren't met.
type CreditApplicationConfirmationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditApplicationConfirmationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditApplicationConfirmationResponseMultiError) AllErrors() []error { return m }

// CreditApplicationConfirmationResponseValidationError is the validation error
// returned by CreditApplicationConfirmationResponse.Validate if the
// designated constraints aren't met.
type CreditApplicationConfirmationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditApplicationConfirmationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditApplicationConfirmationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditApplicationConfirmationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditApplicationConfirmationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditApplicationConfirmationResponseValidationError) ErrorName() string {
	return "CreditApplicationConfirmationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreditApplicationConfirmationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditApplicationConfirmationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditApplicationConfirmationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditApplicationConfirmationResponseValidationError{}

// Validate checks the field values on CreateCreditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCreditRequestMultiError, or nil if none found.
func (m *CreateCreditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for UserId

	// no validation rules for CreditTermMonths

	// no validation rules for AccountId

	if len(errors) > 0 {
		return CreateCreditRequestMultiError(errors)
	}

	return nil
}

// CreateCreditRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCreditRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCreditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditRequestMultiError) AllErrors() []error { return m }

// CreateCreditRequestValidationError is the validation error returned by
// CreateCreditRequest.Validate if the designated constraints aren't met.
type CreateCreditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditRequestValidationError) ErrorName() string {
	return "CreateCreditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditRequestValidationError{}

// Validate checks the field values on CreateCreditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCreditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCreditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCreditResponseMultiError, or nil if none found.
func (m *CreateCreditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCreditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCreditResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCreditResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCreditResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCreditResponseMultiError(errors)
	}

	return nil
}

// CreateCreditResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCreditResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCreditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCreditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCreditResponseMultiError) AllErrors() []error { return m }

// CreateCreditResponseValidationError is the validation error returned by
// CreateCreditResponse.Validate if the designated constraints aren't met.
type CreateCreditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCreditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCreditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCreditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCreditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCreditResponseValidationError) ErrorName() string {
	return "CreateCreditResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCreditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCreditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCreditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCreditResponseValidationError{}

// Validate checks the field values on GetCreditApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditApplicationRequestMultiError, or nil if none found.
func (m *GetCreditApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetCreditApplicationRequestMultiError(errors)
	}

	return nil
}

// GetCreditApplicationRequestMultiError is an error wrapping multiple
// validation errors returned by GetCreditApplicationRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCreditApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditApplicationRequestMultiError) AllErrors() []error { return m }

// GetCreditApplicationRequestValidationError is the validation error returned
// by GetCreditApplicationRequest.Validate if the designated constraints
// aren't met.
type GetCreditApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditApplicationRequestValidationError) ErrorName() string {
	return "GetCreditApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditApplicationRequestValidationError{}

// Validate checks the field values on GetCreditApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCreditApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditApplicationResponseMultiError, or nil if none found.
func (m *GetCreditApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for Status

	// no validation rules for ApprovedAmount

	// no validation rules for DecisionDate

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCreditApplicationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCreditApplicationResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCreditApplicationResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCreditApplicationResponseMultiError(errors)
	}

	return nil
}

// GetCreditApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by GetCreditApplicationResponse.ValidateAll() if
// the designated constraints aren't met.
type GetCreditApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditApplicationResponseMultiError) AllErrors() []error { return m }

// GetCreditApplicationResponseValidationError is the validation error returned
// by GetCreditApplicationResponse.Validate if the designated constraints
// aren't met.
type GetCreditApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditApplicationResponseValidationError) ErrorName() string {
	return "GetCreditApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditApplicationResponseValidationError{}

// Validate checks the field values on UpdateCreditApplicationSolutionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateCreditApplicationSolutionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateCreditApplicationSolutionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateCreditApplicationSolutionRequestMultiError, or nil if none found.
func (m *UpdateCreditApplicationSolutionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCreditApplicationSolutionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationId

	// no validation rules for Status

	// no validation rules for DecisionDate

	// no validation rules for ApprovedAmount

	// no validation rules for DecisionNotes

	if len(errors) > 0 {
		return UpdateCreditApplicationSolutionRequestMultiError(errors)
	}

	return nil
}

// UpdateCreditApplicationSolutionRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateCreditApplicationSolutionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCreditApplicationSolutionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCreditApplicationSolutionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCreditApplicationSolutionRequestMultiError) AllErrors() []error { return m }

// UpdateCreditApplicationSolutionRequestValidationError is the validation
// error returned by UpdateCreditApplicationSolutionRequest.Validate if the
// designated constraints aren't met.
type UpdateCreditApplicationSolutionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCreditApplicationSolutionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCreditApplicationSolutionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCreditApplicationSolutionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCreditApplicationSolutionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCreditApplicationSolutionRequestValidationError) ErrorName() string {
	return "UpdateCreditApplicationSolutionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCreditApplicationSolutionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCreditApplicationSolutionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCreditApplicationSolutionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCreditApplicationSolutionRequestValidationError{}

// Validate checks the field values on UpdateCreditApplicationSolutionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateCreditApplicationSolutionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateCreditApplicationSolutionResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateCreditApplicationSolutionResponseMultiError, or nil if none found.
func (m *UpdateCreditApplicationSolutionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCreditApplicationSolutionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCreditApplicationSolutionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCreditApplicationSolutionResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCreditApplicationSolutionResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCreditApplicationSolutionResponseMultiError(errors)
	}

	return nil
}

// UpdateCreditApplicationSolutionResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateCreditApplicationSolutionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCreditApplicationSolutionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCreditApplicationSolutionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCreditApplicationSolutionResponseMultiError) AllErrors() []error { return m }

// UpdateCreditApplicationSolutionResponseValidationError is the validation
// error returned by UpdateCreditApplicationSolutionResponse.Validate if the
// designated constraints aren't met.
type UpdateCreditApplicationSolutionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCreditApplicationSolutionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCreditApplicationSolutionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCreditApplicationSolutionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCreditApplicationSolutionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCreditApplicationSolutionResponseValidationError) ErrorName() string {
	return "UpdateCreditApplicationSolutionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCreditApplicationSolutionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCreditApplicationSolutionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCreditApplicationSolutionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCreditApplicationSolutionResponseValidationError{}

// Validate checks the field values on GetCreditRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCreditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditRequestMultiError, or nil if none found.
func (m *GetCreditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetCreditRequestMultiError(errors)
	}

	return nil
}

// GetCreditRequestMultiError is an error wrapping multiple validation errors
// returned by GetCreditRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCreditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditRequestMultiError) AllErrors() []error { return m }

// GetCreditRequestValidationError is the validation error returned by
// GetCreditRequest.Validate if the designated constraints aren't met.
type GetCreditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditRequestValidationError) ErrorName() string { return "GetCreditRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCreditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditRequestValidationError{}

// Validate checks the field values on GetCreditResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCreditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCreditResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCreditResponseMultiError, or nil if none found.
func (m *GetCreditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCreditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCredit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCreditResponseValidationError{
					field:  "Credit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCreditResponseValidationError{
					field:  "Credit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCredit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCreditResponseValidationError{
				field:  "Credit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCreditResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCreditResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCreditResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCreditResponseMultiError(errors)
	}

	return nil
}

// GetCreditResponseMultiError is an error wrapping multiple validation errors
// returned by GetCreditResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCreditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCreditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCreditResponseMultiError) AllErrors() []error { return m }

// GetCreditResponseValidationError is the validation error returned by
// GetCreditResponse.Validate if the designated constraints aren't met.
type GetCreditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCreditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCreditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCreditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCreditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCreditResponseValidationError) ErrorName() string {
	return "GetCreditResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCreditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCreditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCreditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCreditResponseValidationError{}

// Validate checks the field values on GetListUserCreditsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListUserCreditsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListUserCreditsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListUserCreditsRequestMultiError, or nil if none found.
func (m *GetListUserCreditsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListUserCreditsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetListUserCreditsRequestMultiError(errors)
	}

	return nil
}

// GetListUserCreditsRequestMultiError is an error wrapping multiple validation
// errors returned by GetListUserCreditsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetListUserCreditsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListUserCreditsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListUserCreditsRequestMultiError) AllErrors() []error { return m }

// GetListUserCreditsRequestValidationError is the validation error returned by
// GetListUserCreditsRequest.Validate if the designated constraints aren't met.
type GetListUserCreditsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListUserCreditsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListUserCreditsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListUserCreditsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListUserCreditsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListUserCreditsRequestValidationError) ErrorName() string {
	return "GetListUserCreditsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListUserCreditsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListUserCreditsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListUserCreditsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListUserCreditsRequestValidationError{}

// Validate checks the field values on GetListUserCreditsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListUserCreditsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListUserCreditsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListUserCreditsResponseMultiError, or nil if none found.
func (m *GetListUserCreditsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListUserCreditsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCredits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListUserCreditsResponseValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListUserCreditsResponseValidationError{
						field:  fmt.Sprintf("Credits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListUserCreditsResponseValidationError{
					field:  fmt.Sprintf("Credits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListUserCreditsResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListUserCreditsResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListUserCreditsResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetListUserCreditsResponseMultiError(errors)
	}

	return nil
}

// GetListUserCreditsResponseMultiError is an error wrapping multiple
// validation errors returned by GetListUserCreditsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetListUserCreditsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListUserCreditsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListUserCreditsResponseMultiError) AllErrors() []error { return m }

// GetListUserCreditsResponseValidationError is the validation error returned
// by GetListUserCreditsResponse.Validate if the designated constraints aren't met.
type GetListUserCreditsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListUserCreditsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListUserCreditsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListUserCreditsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListUserCreditsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListUserCreditsResponseValidationError) ErrorName() string {
	return "GetListUserCreditsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListUserCreditsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListUserCreditsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListUserCreditsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListUserCreditsResponseValidationError{}

// Validate checks the field values on Credit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Credit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credit with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CreditMultiError, or nil if none found.
func (m *Credit) ValidateAll() error {
	return m.validate(true)
}

func (m *Credit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	// no validation rules for UserId

	// no validation rules for Amount

	// no validation rules for InterestRate

	// no validation rules for RemainingAmount

	// no validation rules for Status

	// no validation rules for StartDate

	// no validation rules for EndDate

	// no validation rules for Description

	// no validation rules for AccountId

	// no validation rules for CreditApplicationId

	if len(errors) > 0 {
		return CreditMultiError(errors)
	}

	return nil
}

// CreditMultiError is an error wrapping multiple validation errors returned by
// Credit.ValidateAll() if the designated constraints aren't met.
type CreditMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditMultiError) AllErrors() []error { return m }

// CreditValidationError is the validation error returned by Credit.Validate if
// the designated constraints aren't met.
type CreditValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditValidationError) ErrorName() string { return "CreditValidationError" }

// Error satisfies the builtin error interface
func (e CreditValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditValidationError{}

// Validate checks the field values on GetPaymentScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentScheduleRequestMultiError, or nil if none found.
func (m *GetPaymentScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreditId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetPaymentScheduleRequestMultiError(errors)
	}

	return nil
}

// GetPaymentScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by GetPaymentScheduleRequest.ValidateAll() if the
// designated constraints aren't met.
type GetPaymentScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentScheduleRequestMultiError) AllErrors() []error { return m }

// GetPaymentScheduleRequestValidationError is the validation error returned by
// GetPaymentScheduleRequest.Validate if the designated constraints aren't met.
type GetPaymentScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentScheduleRequestValidationError) ErrorName() string {
	return "GetPaymentScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentScheduleRequestValidationError{}

// Validate checks the field values on GetPaymentScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPaymentScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPaymentScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPaymentScheduleResponseMultiError, or nil if none found.
func (m *GetPaymentScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPaymentScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPayments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPaymentScheduleResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPaymentScheduleResponseValidationError{
						field:  fmt.Sprintf("Payments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPaymentScheduleResponseValidationError{
					field:  fmt.Sprintf("Payments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPaymentScheduleResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPaymentScheduleResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPaymentScheduleResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPaymentScheduleResponseMultiError(errors)
	}

	return nil
}

// GetPaymentScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by GetPaymentScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type GetPaymentScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPaymentScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPaymentScheduleResponseMultiError) AllErrors() []error { return m }

// GetPaymentScheduleResponseValidationError is the validation error returned
// by GetPaymentScheduleResponse.Validate if the designated constraints aren't met.
type GetPaymentScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentScheduleResponseValidationError) ErrorName() string {
	return "GetPaymentScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentScheduleResponseValidationError{}

// Validate checks the field values on PaymentSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaymentSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaymentScheduleMultiError, or nil if none found.
func (m *PaymentSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PaymentId

	// no validation rules for Amount

	// no validation rules for DueDate

	// no validation rules for Status

	if len(errors) > 0 {
		return PaymentScheduleMultiError(errors)
	}

	return nil
}

// PaymentScheduleMultiError is an error wrapping multiple validation errors
// returned by PaymentSchedule.ValidateAll() if the designated constraints
// aren't met.
type PaymentScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentScheduleMultiError) AllErrors() []error { return m }

// PaymentScheduleValidationError is the validation error returned by
// PaymentSchedule.Validate if the designated constraints aren't met.
type PaymentScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentScheduleValidationError) ErrorName() string { return "PaymentScheduleValidationError" }

// Error satisfies the builtin error interface
func (e PaymentScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentScheduleValidationError{}
