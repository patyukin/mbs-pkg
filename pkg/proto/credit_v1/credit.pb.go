// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: credit.proto

package creditspb

import (
	error_v1 "github.com/patyukin/mbs-pkg/pkg/proto/error_v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreditApplicationStatus int32

const (
	CreditApplicationStatus_UNKNOWN_STATUS CreditApplicationStatus = 0
	CreditApplicationStatus_PENDING        CreditApplicationStatus = 1
	CreditApplicationStatus_APPROVED       CreditApplicationStatus = 2
	CreditApplicationStatus_REJECTED       CreditApplicationStatus = 3
)

// Enum value maps for CreditApplicationStatus.
var (
	CreditApplicationStatus_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "PENDING",
		2: "APPROVED",
		3: "REJECTED",
	}
	CreditApplicationStatus_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"PENDING":        1,
		"APPROVED":       2,
		"REJECTED":       3,
	}
)

func (x CreditApplicationStatus) Enum() *CreditApplicationStatus {
	p := new(CreditApplicationStatus)
	*p = x
	return p
}

func (x CreditApplicationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditApplicationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_credit_proto_enumTypes[0].Descriptor()
}

func (CreditApplicationStatus) Type() protoreflect.EnumType {
	return &file_credit_proto_enumTypes[0]
}

func (x CreditApplicationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditApplicationStatus.Descriptor instead.
func (CreditApplicationStatus) EnumDescriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{0}
}

type CreditStatus int32

const (
	CreditStatus_UNKNOWN_CREDIT_STATUS CreditStatus = 0
	CreditStatus_ACTIVE                CreditStatus = 1
	CreditStatus_CLOSED                CreditStatus = 2
)

// Enum value maps for CreditStatus.
var (
	CreditStatus_name = map[int32]string{
		0: "UNKNOWN_CREDIT_STATUS",
		1: "ACTIVE",
		2: "CLOSED",
	}
	CreditStatus_value = map[string]int32{
		"UNKNOWN_CREDIT_STATUS": 0,
		"ACTIVE":                1,
		"CLOSED":                2,
	}
)

func (x CreditStatus) Enum() *CreditStatus {
	p := new(CreditStatus)
	*p = x
	return p
}

func (x CreditStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreditStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_credit_proto_enumTypes[1].Descriptor()
}

func (CreditStatus) Type() protoreflect.EnumType {
	return &file_credit_proto_enumTypes[1]
}

func (x CreditStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreditStatus.Descriptor instead.
func (CreditStatus) EnumDescriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{1}
}

// Перечисление статусов платежей
type PaymentStatus int32

const (
	PaymentStatus_UNKNOWN_PAYMENT_STATUS PaymentStatus = 0
	PaymentStatus_SCHEDULED              PaymentStatus = 1
	PaymentStatus_PAID                   PaymentStatus = 2
	PaymentStatus_MISSED                 PaymentStatus = 3
	PaymentStatus_OVERPAID               PaymentStatus = 4
	PaymentStatus_REFUNDED               PaymentStatus = 5
)

// Enum value maps for PaymentStatus.
var (
	PaymentStatus_name = map[int32]string{
		0: "UNKNOWN_PAYMENT_STATUS",
		1: "SCHEDULED",
		2: "PAID",
		3: "MISSED",
		4: "OVERPAID",
		5: "REFUNDED",
	}
	PaymentStatus_value = map[string]int32{
		"UNKNOWN_PAYMENT_STATUS": 0,
		"SCHEDULED":              1,
		"PAID":                   2,
		"MISSED":                 3,
		"OVERPAID":               4,
		"REFUNDED":               5,
	}
)

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_credit_proto_enumTypes[2].Descriptor()
}

func (PaymentStatus) Type() protoreflect.EnumType {
	return &file_credit_proto_enumTypes[2]
}

func (x PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentStatus.Descriptor instead.
func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{2}
}

// Сообщение запроса для создания новой заявки на кредит
type CreateCreditApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                             // UUID пользователя, подающего заявку
	RequestedAmount int64  `protobuf:"varint,2,opt,name=requested_amount,json=requestedAmount,proto3" json:"requested_amount,omitempty"` // Запрашиваемая сумма кредита
	InterestRate    int32  `protobuf:"varint,3,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`          // Процентная ставка
	StartDate       string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`                    // Предполагаемая дата начала кредита
	EndDate         string `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`                          // Предполагаемая дата окончания кредита
	Description     string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                                 // Дополнительное описание или комментарии
}

func (x *CreateCreditApplicationRequest) Reset() {
	*x = CreateCreditApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCreditApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCreditApplicationRequest) ProtoMessage() {}

func (x *CreateCreditApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCreditApplicationRequest.ProtoReflect.Descriptor instead.
func (*CreateCreditApplicationRequest) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCreditApplicationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateCreditApplicationRequest) GetRequestedAmount() int64 {
	if x != nil {
		return x.RequestedAmount
	}
	return 0
}

func (x *CreateCreditApplicationRequest) GetInterestRate() int32 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *CreateCreditApplicationRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateCreditApplicationRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CreateCreditApplicationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Сообщение ответа при создании заявки на кредит
type CreateCreditApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string                  `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`      // UUID заявки
	Status        CreditApplicationStatus `protobuf:"varint,2,opt,name=status,proto3,enum=credit_v1.CreditApplicationStatus" json:"status,omitempty"` // Статус заявки (обычно PENDING)
	Message       string                  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                       // Дополнительное сообщение
	Error         *error_v1.ErrorResponse `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateCreditApplicationResponse) Reset() {
	*x = CreateCreditApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCreditApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCreditApplicationResponse) ProtoMessage() {}

func (x *CreateCreditApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCreditApplicationResponse.ProtoReflect.Descriptor instead.
func (*CreateCreditApplicationResponse) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCreditApplicationResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *CreateCreditApplicationResponse) GetStatus() CreditApplicationStatus {
	if x != nil {
		return x.Status
	}
	return CreditApplicationStatus_UNKNOWN_STATUS
}

func (x *CreateCreditApplicationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCreditApplicationResponse) GetError() *error_v1.ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

// Сообщение запроса для получения статуса заявки на кредит
type GetCreditApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"` // UUID заявки
}

func (x *GetCreditApplicationRequest) Reset() {
	*x = GetCreditApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreditApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreditApplicationRequest) ProtoMessage() {}

func (x *GetCreditApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreditApplicationRequest.ProtoReflect.Descriptor instead.
func (*GetCreditApplicationRequest) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{2}
}

func (x *GetCreditApplicationRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

// Сообщение ответа при получении статуса заявки на кредит
type GetCreditApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId  string                  `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`      // UUID заявки
	Status         CreditApplicationStatus `protobuf:"varint,2,opt,name=status,proto3,enum=credit_v1.CreditApplicationStatus" json:"status,omitempty"` // Текущий статус заявки
	ApprovedAmount float64                 `protobuf:"fixed64,3,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"` // Одобренная сумма (если применимо)
	DecisionDate   string                  `protobuf:"bytes,4,opt,name=decision_date,json=decisionDate,proto3" json:"decision_date,omitempty"`         // Дата принятия решения
	Message        string                  `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`                                       // Дополнительное сообщение
}

func (x *GetCreditApplicationResponse) Reset() {
	*x = GetCreditApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreditApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreditApplicationResponse) ProtoMessage() {}

func (x *GetCreditApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreditApplicationResponse.ProtoReflect.Descriptor instead.
func (*GetCreditApplicationResponse) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{3}
}

func (x *GetCreditApplicationResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *GetCreditApplicationResponse) GetStatus() CreditApplicationStatus {
	if x != nil {
		return x.Status
	}
	return CreditApplicationStatus_UNKNOWN_STATUS
}

func (x *GetCreditApplicationResponse) GetApprovedAmount() float64 {
	if x != nil {
		return x.ApprovedAmount
	}
	return 0
}

func (x *GetCreditApplicationResponse) GetDecisionDate() string {
	if x != nil {
		return x.DecisionDate
	}
	return ""
}

func (x *GetCreditApplicationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Сообщение запроса для обновления статуса заявки (например, одобрение или отклонение)
type UpdateCreditApplicationStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId  string                  `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`                             // UUID заявки
	NewStatus      CreditApplicationStatus `protobuf:"varint,2,opt,name=new_status,json=newStatus,proto3,enum=credit_v1.CreditApplicationStatus" json:"new_status,omitempty"` // Новый статус заявки (APPROVED или REJECTED)
	ApprovedAmount float64                 `protobuf:"fixed64,3,opt,name=approved_amount,json=approvedAmount,proto3" json:"approved_amount,omitempty"`                        // Одобренная сумма (если статус APPROVED)
	DecisionNotes  string                  `protobuf:"bytes,4,opt,name=decision_notes,json=decisionNotes,proto3" json:"decision_notes,omitempty"`                             // Примечания к решению
}

func (x *UpdateCreditApplicationStatusRequest) Reset() {
	*x = UpdateCreditApplicationStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCreditApplicationStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCreditApplicationStatusRequest) ProtoMessage() {}

func (x *UpdateCreditApplicationStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCreditApplicationStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateCreditApplicationStatusRequest) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCreditApplicationStatusRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *UpdateCreditApplicationStatusRequest) GetNewStatus() CreditApplicationStatus {
	if x != nil {
		return x.NewStatus
	}
	return CreditApplicationStatus_UNKNOWN_STATUS
}

func (x *UpdateCreditApplicationStatusRequest) GetApprovedAmount() float64 {
	if x != nil {
		return x.ApprovedAmount
	}
	return 0
}

func (x *UpdateCreditApplicationStatusRequest) GetDecisionNotes() string {
	if x != nil {
		return x.DecisionNotes
	}
	return ""
}

// Сообщение ответа при обновлении статуса заявки
type UpdateCreditApplicationStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string                  `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`      // UUID заявки
	Status        CreditApplicationStatus `protobuf:"varint,2,opt,name=status,proto3,enum=credit_v1.CreditApplicationStatus" json:"status,omitempty"` // Обновлённый статус заявки
	Message       string                  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                       // Дополнительное сообщение
}

func (x *UpdateCreditApplicationStatusResponse) Reset() {
	*x = UpdateCreditApplicationStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCreditApplicationStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCreditApplicationStatusResponse) ProtoMessage() {}

func (x *UpdateCreditApplicationStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCreditApplicationStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateCreditApplicationStatusResponse) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCreditApplicationStatusResponse) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *UpdateCreditApplicationStatusResponse) GetStatus() CreditApplicationStatus {
	if x != nil {
		return x.Status
	}
	return CreditApplicationStatus_UNKNOWN_STATUS
}

func (x *UpdateCreditApplicationStatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Сообщение запроса для получения информации о кредите
type GetCreditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreditId string `protobuf:"bytes,1,opt,name=credit_id,json=creditId,proto3" json:"credit_id,omitempty"` // UUID кредита
}

func (x *GetCreditRequest) Reset() {
	*x = GetCreditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreditRequest) ProtoMessage() {}

func (x *GetCreditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreditRequest.ProtoReflect.Descriptor instead.
func (*GetCreditRequest) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{6}
}

func (x *GetCreditRequest) GetCreditId() string {
	if x != nil {
		return x.CreditId
	}
	return ""
}

// Сообщение ответа при получении информации о кредите
type GetCreditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreditId        string       `protobuf:"bytes,1,opt,name=credit_id,json=creditId,proto3" json:"credit_id,omitempty"`                        // UUID кредита
	UserId          string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              // UUID пользователя
	Amount          float64      `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`                                          // Сумма кредита
	InterestRate    float64      `protobuf:"fixed64,5,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`          // Процентная ставка
	RemainingAmount float64      `protobuf:"fixed64,6,opt,name=remaining_amount,json=remainingAmount,proto3" json:"remaining_amount,omitempty"` // Остаток по кредиту
	Status          CreditStatus `protobuf:"varint,7,opt,name=status,proto3,enum=credit_v1.CreditStatus" json:"status,omitempty"`               // Статус кредита
	StartDate       string       `protobuf:"bytes,8,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`                     // Дата начала кредита
	EndDate         string       `protobuf:"bytes,9,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`                           // Дата окончания кредита
	Description     string       `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`                                 // Дополнительное описание или комментарии
}

func (x *GetCreditResponse) Reset() {
	*x = GetCreditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCreditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCreditResponse) ProtoMessage() {}

func (x *GetCreditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCreditResponse.ProtoReflect.Descriptor instead.
func (*GetCreditResponse) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{7}
}

func (x *GetCreditResponse) GetCreditId() string {
	if x != nil {
		return x.CreditId
	}
	return ""
}

func (x *GetCreditResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCreditResponse) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetCreditResponse) GetInterestRate() float64 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *GetCreditResponse) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *GetCreditResponse) GetStatus() CreditStatus {
	if x != nil {
		return x.Status
	}
	return CreditStatus_UNKNOWN_CREDIT_STATUS
}

func (x *GetCreditResponse) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetCreditResponse) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetCreditResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Сообщение запроса для получения всех кредитов пользователя
type ListUserCreditsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`        // UUID пользователя
	Page     int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // Номер страницы (для пагинации)
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // Размер страницы
}

func (x *ListUserCreditsRequest) Reset() {
	*x = ListUserCreditsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCreditsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCreditsRequest) ProtoMessage() {}

func (x *ListUserCreditsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCreditsRequest.ProtoReflect.Descriptor instead.
func (*ListUserCreditsRequest) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{8}
}

func (x *ListUserCreditsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListUserCreditsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListUserCreditsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Сообщение ответа при получении списка кредитов пользователя
type ListUserCreditsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreditList   []*Credit `protobuf:"bytes,1,rep,name=credit_list,json=creditList,proto3" json:"credit_list,omitempty"`        // Список кредитов пользователя
	TotalCredits int32     `protobuf:"varint,2,opt,name=total_credits,json=totalCredits,proto3" json:"total_credits,omitempty"` // Общее количество кредитов
	CurrentPage  int32     `protobuf:"varint,3,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"`    // Текущий номер страницы
	TotalPages   int32     `protobuf:"varint,4,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`       // Общее количество страниц
}

func (x *ListUserCreditsResponse) Reset() {
	*x = ListUserCreditsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserCreditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCreditsResponse) ProtoMessage() {}

func (x *ListUserCreditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCreditsResponse.ProtoReflect.Descriptor instead.
func (*ListUserCreditsResponse) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{9}
}

func (x *ListUserCreditsResponse) GetCreditList() []*Credit {
	if x != nil {
		return x.CreditList
	}
	return nil
}

func (x *ListUserCreditsResponse) GetTotalCredits() int32 {
	if x != nil {
		return x.TotalCredits
	}
	return 0
}

func (x *ListUserCreditsResponse) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *ListUserCreditsResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

// Сообщение кредита
type Credit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreditId        string       `protobuf:"bytes,1,opt,name=credit_id,json=creditId,proto3" json:"credit_id,omitempty"`                        // UUID кредита
	UserId          string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                              // UUID пользователя
	Amount          float64      `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`                                          // Сумма кредита
	InterestRate    float64      `protobuf:"fixed64,5,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`          // Процентная ставка
	RemainingAmount float64      `protobuf:"fixed64,6,opt,name=remaining_amount,json=remainingAmount,proto3" json:"remaining_amount,omitempty"` // Остаток по кредиту
	Status          CreditStatus `protobuf:"varint,7,opt,name=status,proto3,enum=credit_v1.CreditStatus" json:"status,omitempty"`               // Статус кредита
	StartDate       string       `protobuf:"bytes,8,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`                     // Дата начала кредита
	EndDate         string       `protobuf:"bytes,9,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`                           // Дата окончания кредита
	Description     string       `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`                                 // Дополнительное описание или комментарии
}

func (x *Credit) Reset() {
	*x = Credit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credit) ProtoMessage() {}

func (x *Credit) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credit.ProtoReflect.Descriptor instead.
func (*Credit) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{10}
}

func (x *Credit) GetCreditId() string {
	if x != nil {
		return x.CreditId
	}
	return ""
}

func (x *Credit) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Credit) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Credit) GetInterestRate() float64 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *Credit) GetRemainingAmount() float64 {
	if x != nil {
		return x.RemainingAmount
	}
	return 0
}

func (x *Credit) GetStatus() CreditStatus {
	if x != nil {
		return x.Status
	}
	return CreditStatus_UNKNOWN_CREDIT_STATUS
}

func (x *Credit) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Credit) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Credit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Сообщение запроса для создания графика платежей
type CreatePaymentScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreditId string `protobuf:"bytes,1,opt,name=credit_id,json=creditId,proto3" json:"credit_id,omitempty"` // UUID кредита
}

func (x *CreatePaymentScheduleRequest) Reset() {
	*x = CreatePaymentScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentScheduleRequest) ProtoMessage() {}

func (x *CreatePaymentScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentScheduleRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentScheduleRequest) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{11}
}

func (x *CreatePaymentScheduleRequest) GetCreditId() string {
	if x != nil {
		return x.CreditId
	}
	return ""
}

// Сообщение ответа при создании графика платежей
type CreatePaymentScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // Сообщение о результате операции
}

func (x *CreatePaymentScheduleResponse) Reset() {
	*x = CreatePaymentScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentScheduleResponse) ProtoMessage() {}

func (x *CreatePaymentScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentScheduleResponse.ProtoReflect.Descriptor instead.
func (*CreatePaymentScheduleResponse) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{12}
}

func (x *CreatePaymentScheduleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Сообщение запроса для получения графика платежей
type GetPaymentScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreditId string `protobuf:"bytes,1,opt,name=credit_id,json=creditId,proto3" json:"credit_id,omitempty"` // UUID кредита
}

func (x *GetPaymentScheduleRequest) Reset() {
	*x = GetPaymentScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentScheduleRequest) ProtoMessage() {}

func (x *GetPaymentScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentScheduleRequest) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{13}
}

func (x *GetPaymentScheduleRequest) GetCreditId() string {
	if x != nil {
		return x.CreditId
	}
	return ""
}

// Сообщение ответа при получении графика платежей
type GetPaymentScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedules []*PaymentSchedule `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty"` // Список платежей по графику
}

func (x *GetPaymentScheduleResponse) Reset() {
	*x = GetPaymentScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentScheduleResponse) ProtoMessage() {}

func (x *GetPaymentScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetPaymentScheduleResponse) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{14}
}

func (x *GetPaymentScheduleResponse) GetSchedules() []*PaymentSchedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

// Сообщение графика платежей
type PaymentSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string        `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`        // UUID платежа
	Amount    float64       `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`                             // Сумма платежа
	DueDate   string        `protobuf:"bytes,3,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`              // Дата платежа
	Status    PaymentStatus `protobuf:"varint,4,opt,name=status,proto3,enum=credit_v1.PaymentStatus" json:"status,omitempty"` // Статус платежа
}

func (x *PaymentSchedule) Reset() {
	*x = PaymentSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentSchedule) ProtoMessage() {}

func (x *PaymentSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentSchedule.ProtoReflect.Descriptor instead.
func (*PaymentSchedule) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{15}
}

func (x *PaymentSchedule) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *PaymentSchedule) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentSchedule) GetDueDate() string {
	if x != nil {
		return x.DueDate
	}
	return ""
}

func (x *PaymentSchedule) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_UNKNOWN_PAYMENT_STATUS
}

// Сообщение запроса для обновления графика платежей (например, отметка платежа как выполненного)
type UpdatePaymentScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string        `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`                               // UUID платежа
	NewStatus PaymentStatus `protobuf:"varint,2,opt,name=new_status,json=newStatus,proto3,enum=credit_v1.PaymentStatus" json:"new_status,omitempty"` // Новый статус платежа
}

func (x *UpdatePaymentScheduleRequest) Reset() {
	*x = UpdatePaymentScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePaymentScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePaymentScheduleRequest) ProtoMessage() {}

func (x *UpdatePaymentScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePaymentScheduleRequest.ProtoReflect.Descriptor instead.
func (*UpdatePaymentScheduleRequest) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{16}
}

func (x *UpdatePaymentScheduleRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *UpdatePaymentScheduleRequest) GetNewStatus() PaymentStatus {
	if x != nil {
		return x.NewStatus
	}
	return PaymentStatus_UNKNOWN_PAYMENT_STATUS
}

// Сообщение ответа при обновлении графика платежей
type UpdatePaymentScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string        `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`        // UUID платежа
	Status    PaymentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=credit_v1.PaymentStatus" json:"status,omitempty"` // Обновлённый статус платежа
	Message   string        `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                             // Дополнительное сообщение
}

func (x *UpdatePaymentScheduleResponse) Reset() {
	*x = UpdatePaymentScheduleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePaymentScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePaymentScheduleResponse) ProtoMessage() {}

func (x *UpdatePaymentScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_credit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePaymentScheduleResponse.ProtoReflect.Descriptor instead.
func (*UpdatePaymentScheduleResponse) Descriptor() ([]byte, []int) {
	return file_credit_proto_rawDescGZIP(), []int{17}
}

func (x *UpdatePaymentScheduleResponse) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *UpdatePaymentScheduleResponse) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_UNKNOWN_PAYMENT_STATUS
}

func (x *UpdatePaymentScheduleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_credit_proto protoreflect.FileDescriptor

var file_credit_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x1a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x01, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x44, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xe9, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe0, 0x01,
	0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0xa4, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x22, 0xbe, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x22, 0x56,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x76,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2a, 0x56, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x41, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x6c,
	0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41,
	0x49, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56, 0x45, 0x52, 0x50, 0x41, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05, 0x32, 0xcf, 0x06, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x31, 0x12, 0x70, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1b,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x6f, 0x75,
	0x72, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x79, 0x6f, 0x75, 0x72, 0x72, 0x65,
	0x70, 0x6f, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_credit_proto_rawDescOnce sync.Once
	file_credit_proto_rawDescData = file_credit_proto_rawDesc
)

func file_credit_proto_rawDescGZIP() []byte {
	file_credit_proto_rawDescOnce.Do(func() {
		file_credit_proto_rawDescData = protoimpl.X.CompressGZIP(file_credit_proto_rawDescData)
	})
	return file_credit_proto_rawDescData
}

var file_credit_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_credit_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_credit_proto_goTypes = []any{
	(CreditApplicationStatus)(0),                  // 0: credit_v1.CreditApplicationStatus
	(CreditStatus)(0),                             // 1: credit_v1.CreditStatus
	(PaymentStatus)(0),                            // 2: credit_v1.PaymentStatus
	(*CreateCreditApplicationRequest)(nil),        // 3: credit_v1.CreateCreditApplicationRequest
	(*CreateCreditApplicationResponse)(nil),       // 4: credit_v1.CreateCreditApplicationResponse
	(*GetCreditApplicationRequest)(nil),           // 5: credit_v1.GetCreditApplicationRequest
	(*GetCreditApplicationResponse)(nil),          // 6: credit_v1.GetCreditApplicationResponse
	(*UpdateCreditApplicationStatusRequest)(nil),  // 7: credit_v1.UpdateCreditApplicationStatusRequest
	(*UpdateCreditApplicationStatusResponse)(nil), // 8: credit_v1.UpdateCreditApplicationStatusResponse
	(*GetCreditRequest)(nil),                      // 9: credit_v1.GetCreditRequest
	(*GetCreditResponse)(nil),                     // 10: credit_v1.GetCreditResponse
	(*ListUserCreditsRequest)(nil),                // 11: credit_v1.ListUserCreditsRequest
	(*ListUserCreditsResponse)(nil),               // 12: credit_v1.ListUserCreditsResponse
	(*Credit)(nil),                                // 13: credit_v1.Credit
	(*CreatePaymentScheduleRequest)(nil),          // 14: credit_v1.CreatePaymentScheduleRequest
	(*CreatePaymentScheduleResponse)(nil),         // 15: credit_v1.CreatePaymentScheduleResponse
	(*GetPaymentScheduleRequest)(nil),             // 16: credit_v1.GetPaymentScheduleRequest
	(*GetPaymentScheduleResponse)(nil),            // 17: credit_v1.GetPaymentScheduleResponse
	(*PaymentSchedule)(nil),                       // 18: credit_v1.PaymentSchedule
	(*UpdatePaymentScheduleRequest)(nil),          // 19: credit_v1.UpdatePaymentScheduleRequest
	(*UpdatePaymentScheduleResponse)(nil),         // 20: credit_v1.UpdatePaymentScheduleResponse
	(*error_v1.ErrorResponse)(nil),                // 21: error_v1.ErrorResponse
}
var file_credit_proto_depIdxs = []int32{
	0,  // 0: credit_v1.CreateCreditApplicationResponse.status:type_name -> credit_v1.CreditApplicationStatus
	21, // 1: credit_v1.CreateCreditApplicationResponse.error:type_name -> error_v1.ErrorResponse
	0,  // 2: credit_v1.GetCreditApplicationResponse.status:type_name -> credit_v1.CreditApplicationStatus
	0,  // 3: credit_v1.UpdateCreditApplicationStatusRequest.new_status:type_name -> credit_v1.CreditApplicationStatus
	0,  // 4: credit_v1.UpdateCreditApplicationStatusResponse.status:type_name -> credit_v1.CreditApplicationStatus
	1,  // 5: credit_v1.GetCreditResponse.status:type_name -> credit_v1.CreditStatus
	13, // 6: credit_v1.ListUserCreditsResponse.credit_list:type_name -> credit_v1.Credit
	1,  // 7: credit_v1.Credit.status:type_name -> credit_v1.CreditStatus
	18, // 8: credit_v1.GetPaymentScheduleResponse.schedules:type_name -> credit_v1.PaymentSchedule
	2,  // 9: credit_v1.PaymentSchedule.status:type_name -> credit_v1.PaymentStatus
	2,  // 10: credit_v1.UpdatePaymentScheduleRequest.new_status:type_name -> credit_v1.PaymentStatus
	2,  // 11: credit_v1.UpdatePaymentScheduleResponse.status:type_name -> credit_v1.PaymentStatus
	3,  // 12: credit_v1.CreditsServiceV1.CreateCreditApplication:input_type -> credit_v1.CreateCreditApplicationRequest
	5,  // 13: credit_v1.CreditsServiceV1.GetCreditApplication:input_type -> credit_v1.GetCreditApplicationRequest
	7,  // 14: credit_v1.CreditsServiceV1.UpdateCreditApplicationStatus:input_type -> credit_v1.UpdateCreditApplicationStatusRequest
	9,  // 15: credit_v1.CreditsServiceV1.GetCredit:input_type -> credit_v1.GetCreditRequest
	11, // 16: credit_v1.CreditsServiceV1.ListUserCredits:input_type -> credit_v1.ListUserCreditsRequest
	14, // 17: credit_v1.CreditsServiceV1.CreatePaymentSchedule:input_type -> credit_v1.CreatePaymentScheduleRequest
	16, // 18: credit_v1.CreditsServiceV1.GetPaymentSchedule:input_type -> credit_v1.GetPaymentScheduleRequest
	19, // 19: credit_v1.CreditsServiceV1.UpdatePaymentSchedule:input_type -> credit_v1.UpdatePaymentScheduleRequest
	4,  // 20: credit_v1.CreditsServiceV1.CreateCreditApplication:output_type -> credit_v1.CreateCreditApplicationResponse
	6,  // 21: credit_v1.CreditsServiceV1.GetCreditApplication:output_type -> credit_v1.GetCreditApplicationResponse
	8,  // 22: credit_v1.CreditsServiceV1.UpdateCreditApplicationStatus:output_type -> credit_v1.UpdateCreditApplicationStatusResponse
	10, // 23: credit_v1.CreditsServiceV1.GetCredit:output_type -> credit_v1.GetCreditResponse
	12, // 24: credit_v1.CreditsServiceV1.ListUserCredits:output_type -> credit_v1.ListUserCreditsResponse
	15, // 25: credit_v1.CreditsServiceV1.CreatePaymentSchedule:output_type -> credit_v1.CreatePaymentScheduleResponse
	17, // 26: credit_v1.CreditsServiceV1.GetPaymentSchedule:output_type -> credit_v1.GetPaymentScheduleResponse
	20, // 27: credit_v1.CreditsServiceV1.UpdatePaymentSchedule:output_type -> credit_v1.UpdatePaymentScheduleResponse
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_credit_proto_init() }
func file_credit_proto_init() {
	if File_credit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_credit_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateCreditApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateCreditApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetCreditApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetCreditApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCreditApplicationStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCreditApplicationStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetCreditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetCreditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserCreditsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListUserCreditsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Credit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePaymentScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePaymentScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetPaymentScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetPaymentScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*PaymentSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePaymentScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credit_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePaymentScheduleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_credit_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_credit_proto_goTypes,
		DependencyIndexes: file_credit_proto_depIdxs,
		EnumInfos:         file_credit_proto_enumTypes,
		MessageInfos:      file_credit_proto_msgTypes,
	}.Build()
	File_credit_proto = out.File
	file_credit_proto_rawDesc = nil
	file_credit_proto_goTypes = nil
	file_credit_proto_depIdxs = nil
}
